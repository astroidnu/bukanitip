package dietbisabesok.com.bukanitip.data;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "COUNTRY_DATA".
*/
public class CountryDataDao extends AbstractDao<CountryData, Void> {

    public static final String TABLENAME = "COUNTRY_DATA";

    /**
     * Properties of entity CountryData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", false, "ID");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Icon_image = new Property(2, String.class, "icon_image", false, "ICON_IMAGE");
        public final static Property Background_image = new Property(3, String.class, "background_image", false, "BACKGROUND_IMAGE");
        public final static Property Jumlah_titipan = new Property(4, long.class, "jumlah_titipan", false, "JUMLAH_TITIPAN");
        public final static Property Jumlah_diaspora = new Property(5, long.class, "jumlah_diaspora", false, "JUMLAH_DIASPORA");
        public final static Property Favorite = new Property(6, int.class, "favorite", false, "FAVORITE");
    }


    public CountryDataDao(DaoConfig config) {
        super(config);
    }
    
    public CountryDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"COUNTRY_DATA\" (" + //
                "\"ID\" INTEGER NOT NULL ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"ICON_IMAGE\" TEXT," + // 2: icon_image
                "\"BACKGROUND_IMAGE\" TEXT," + // 3: background_image
                "\"JUMLAH_TITIPAN\" INTEGER NOT NULL ," + // 4: jumlah_titipan
                "\"JUMLAH_DIASPORA\" INTEGER NOT NULL ," + // 5: jumlah_diaspora
                "\"FAVORITE\" INTEGER NOT NULL );"); // 6: favorite
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COUNTRY_DATA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CountryData entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String icon_image = entity.getIcon_image();
        if (icon_image != null) {
            stmt.bindString(3, icon_image);
        }
 
        String background_image = entity.getBackground_image();
        if (background_image != null) {
            stmt.bindString(4, background_image);
        }
        stmt.bindLong(5, entity.getJumlah_titipan());
        stmt.bindLong(6, entity.getJumlah_diaspora());
        stmt.bindLong(7, entity.getFavorite());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CountryData entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String icon_image = entity.getIcon_image();
        if (icon_image != null) {
            stmt.bindString(3, icon_image);
        }
 
        String background_image = entity.getBackground_image();
        if (background_image != null) {
            stmt.bindString(4, background_image);
        }
        stmt.bindLong(5, entity.getJumlah_titipan());
        stmt.bindLong(6, entity.getJumlah_diaspora());
        stmt.bindLong(7, entity.getFavorite());
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public CountryData readEntity(Cursor cursor, int offset) {
        CountryData entity = new CountryData( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // icon_image
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // background_image
            cursor.getLong(offset + 4), // jumlah_titipan
            cursor.getLong(offset + 5), // jumlah_diaspora
            cursor.getInt(offset + 6) // favorite
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CountryData entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setIcon_image(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBackground_image(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setJumlah_titipan(cursor.getLong(offset + 4));
        entity.setJumlah_diaspora(cursor.getLong(offset + 5));
        entity.setFavorite(cursor.getInt(offset + 6));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(CountryData entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(CountryData entity) {
        return null;
    }

    @Override
    public boolean hasKey(CountryData entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
